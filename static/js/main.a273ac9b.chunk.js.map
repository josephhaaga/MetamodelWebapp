{"version":3,"sources":["ModelPage.js","App.js","serviceWorker.js","index.js"],"names":["ModelPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","increment","bind","assertThisInitialized","decrement","data","gist","graph","state","step","setState","Math","min","length","max","gistUrl","graphUrl","react_default","a","createElement","className","style","marginBottom","onClick","return","color","fontSize","class","es","id","src","width","Component","App","navigate","returnHome","homePage","screen","ModelPage_ModelPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a273ac9b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Gist from 'react-gist';\n\nclass ModelPage extends Component {\n  constructor(props){\n    super(props)\n    this.increment = this.increment.bind(this)\n    this.decrement = this.decrement.bind(this)\n    this.data = [\n      {\n        gist: '4ca633e244d5eb5e10246db6b9879e62',\n        graph: 'assets/createNodes.jpg'\n      }, {\n        gist: '40627a247ac785b610f12caa25dabe00',\n        graph: 'assets/createEdges.jpg'\n      }, {\n        gist: '4789af32d8a408524a68473a7997f3fb',\n        graph: 'assets/createHyperedges.jpg'\n      }]\n    this.state = {\n      step: 0\n    }\n  }\n\n  increment(){\n    this.setState({\n      step: Math.min(this.data.length - 1, this.state.step + 1)\n    })\n  }\n  decrement(){\n    this.setState({\n      step: Math.max(0, this.state.step - 1)\n    })\n  }\n\n  render(){\n\n    const gistUrl = this.data[this.state.step]['gist'];\n    const graphUrl = this.data[this.state.step]['graph'];\n    // const graphUrl = ;\n    return (\n      <div className=\"cell medium-12\">\n        <div className=\"grid-x\">\n          <div className=\"cell medium-12\"\n           style={{marginBottom: \"1rem\"}}>\n            <a\n              onClick={this.props.return}\n              style={{color:\"lightgray\", fontSize: \"14px\"}}>&larr; Back to model list</a>\n          </div>\n          <div className=\"cell medium-12\">\n            <div className=\"grid-x\">\n              <div className=\"cell medium-8\">\n                <div className=\"button-group\">\n                  <a className=\"button left\"\n                    onClick={this.decrement}>&larr;</a>\n                  <a className=\"button right\"\n                    onClick={this.increment}>&rarr;</a>\n                </div>\n              </div>\n              <div className=\"cell medium-4\">\n                <button class=\"button fork\">Fork this model</button>\n              </div>\n            </div>\n            <h2>Step {this.state.step + 1}</h2>\n          </div>\n          <div className=\"cell medium-6\">\n            <div className=\"the-code\">\n              <Gist id={gistUrl} />\n            </div>\n          </div>\n          <div className=\"cell medium-6\">\n            <img\n             src={graphUrl}\n             style={{width: \"100%\"}} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { ModelPage };\n","import React, { Component } from 'react';\nimport './App.css';\nimport { ModelPage } from './ModelPage';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.navigate = this.navigate.bind(this);\n    this.returnHome = this.returnHome.bind(this);\n    this.state = {\n      homePage: true\n    }\n  }\n  navigate(){\n    this.setState({\n      homePage: false\n    })\n  }\n  returnHome(){\n    this.setState({\n      homePage: true\n    })\n  }\n  render() {\n    const screen = (this.state.homePage\n      ? (\n          <div className=\"cell medium-8\">\n            <h2>Models</h2>\n            <ul>\n              <li><a onClick={this.navigate}>Malfeasance Community Detection</a></li>\n              <li><a onClick={this.navigate}>Ghost Preparers</a></li>\n              <li><a onClick={this.navigate}>Dependent Claims</a></li>\n              <li><a onClick={this.navigate}>PTIN-EIN Matching</a></li>\n            </ul>\n          </div>\n        )\n      : (\n          <ModelPage return={this.returnHome} />\n        )\n    )\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"grid-container\" style={{width: \"100%\"}}>\n            <div className=\"grid-x\">\n              {screen}\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}